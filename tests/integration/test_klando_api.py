#!/usr/bin/env python3
"""
Script de test pour v√©rifier la connexion √† l'API Klando MapLibre
Teste la cl√© API KLANDO_API_KEY d√©finie dans .env
"""

import os
import requests
import json
from dotenv import load_dotenv
from pathlib import Path

# Charger les variables d'environnement
env_path = Path('.env')
load_dotenv(dotenv_path=env_path)

def test_klando_api():
    """Test de connexion √† l'API Klando MapLibre"""
    
    # R√©cup√©rer l'URL avec cl√© API int√©gr√©e depuis .env
    api_url = os.environ.get('KLANDO_MAP_API_URL')
    api_key = os.environ.get('KLANDO_API_KEY')
    
    if api_url:
        print(f"üîó URL avec cl√© API trouv√©e: {api_url[:50]}...{api_url[-20:]}")
        # Extraire l'URL de base pour les tests
        if '?' in api_url:
            base_url = api_url.split('?')[0]
            api_params = api_url.split('?')[1]
        else:
            base_url = api_url
            api_params = ""
        style_url = api_url  # URL compl√®te avec cl√©
        tile_url = f"https://geo.klando-carpool.com/data/klando-carpool-map-sn-v1.1/0/0/0.pbf?{api_params}" if api_params else "https://geo.klando-carpool.com/data/klando-carpool-map-sn-v1.1/0/0/0.pbf"
    elif api_key:
        print(f"üîë Cl√© API trouv√©e: {api_key[:8]}...{api_key[-8:]}")
        # URLs de test avec cl√© s√©par√©e
        style_url = f"https://geo.klando-carpool.com/styles/carpool/style.json?api_key={api_key}"
        tile_url = f"https://geo.klando-carpool.com/data/klando-carpool-map-sn-v1.1/0/0/0.pbf?api_key={api_key}"
    else:
        print("‚ùå ERREUR: Ni KLANDO_MAP_API_URL ni KLANDO_API_KEY trouv√©es dans .env")
        return False
    
    print("\nüìã Tests de connexion:")
    print("=" * 50)
    
    # Test 1: Style JSON
    print(f"\n1Ô∏è‚É£ Test du style JSON:")
    print(f"   URL: {style_url}")
    
    try:
        response = requests.get(style_url, timeout=10)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                style_data = response.json()
                print(f"   ‚úÖ Style JSON valide")
                print(f"   Version: {style_data.get('version', 'Non sp√©cifi√©e')}")
                print(f"   Nom: {style_data.get('name', 'Non sp√©cifi√©')}")
                if 'sources' in style_data:
                    print(f"   Sources: {len(style_data['sources'])} trouv√©es")
                if 'layers' in style_data:
                    print(f"   Layers: {len(style_data['layers'])} trouv√©s")
            except json.JSONDecodeError:
                print(f"   ‚ö†Ô∏è R√©ponse re√ßue mais JSON invalide")
        elif response.status_code == 401:
            print(f"   ‚ùå Erreur d'autorisation - Cl√© API invalide")
            return False
        elif response.status_code == 403:
            print(f"   ‚ùå Acc√®s interdit - V√©rifiez les permissions")
            return False
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")
            print(f"   R√©ponse: {response.text[:200]}...")
            
    except requests.exceptions.Timeout:
        print(f"   ‚è±Ô∏è Timeout - Serveur trop lent")
        return False
    except requests.exceptions.ConnectionError:
        print(f"   üîå Erreur de connexion - Serveur inaccessible")
        return False
    except Exception as e:
        print(f"   ‚ùå Erreur: {str(e)}")
        return False
    
    # Test 2: Tuile de test
    print(f"\n2Ô∏è‚É£ Test d'une tuile:")
    print(f"   URL: {tile_url}")
    
    try:
        response = requests.get(tile_url, timeout=10)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            print(f"   ‚úÖ Tuile accessible")
            print(f"   Taille: {len(response.content)} bytes")
            print(f"   Content-Type: {response.headers.get('content-type', 'Non sp√©cifi√©')}")
        elif response.status_code == 401:
            print(f"   ‚ùå Erreur d'autorisation - Cl√© API invalide")
            return False
        elif response.status_code == 404:
            print(f"   ‚ö†Ô∏è Tuile non trouv√©e (normal pour niveau 0)")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")
            
    except requests.exceptions.Timeout:
        print(f"   ‚è±Ô∏è Timeout - Serveur trop lent")
    except requests.exceptions.ConnectionError:
        print(f"   üîå Erreur de connexion - Serveur inaccessible")
    except Exception as e:
        print(f"   ‚ùå Erreur: {str(e)}")
    
    # Test 3: V√©rification de la configuration
    print(f"\n3Ô∏è‚É£ V√©rification de la configuration:")
    
    maplibre_style_url = os.environ.get('MAPLIBRE_STYLE_URL')
    maplibre_api_key = os.environ.get('MAPLIBRE_API_KEY')
    klando_map_url = os.environ.get('KLANDO_MAP_API_URL')
    
    print(f"   MAPLIBRE_STYLE_URL: {maplibre_style_url}")
    print(f"   MAPLIBRE_API_KEY: {'‚úÖ D√©finie' if maplibre_api_key else '‚ùå Non d√©finie'}")
    print(f"   KLANDO_MAP_API_URL: {'‚úÖ D√©finie' if klando_map_url else '‚ùå Non d√©finie'}")
    
    if klando_map_url and maplibre_style_url != klando_map_url:
        print(f"   ‚ö†Ô∏è MAPLIBRE_STYLE_URL diff√©rente de KLANDO_MAP_API_URL")
        print(f"   Recommandation: Utiliser KLANDO_MAP_API_URL pour MapLibre")
    
    print(f"\nüìä R√©sum√©:")
    print("=" * 50)
    
    if response.status_code in [200, 404]:  # 404 acceptable pour les tuiles
        print("‚úÖ Connexion API r√©ussie")
        print("‚úÖ Cl√© API valide")
        print("‚úÖ Serveur accessible")
        
        # Suggestions de configuration
        print(f"\nüí° Configuration recommand√©e pour .env:")
        if api_url:
            print(f"MAPLIBRE_STYLE_URL={api_url}")
            print(f"# Cl√© API d√©j√† int√©gr√©e dans l'URL")
        else:
            print(f"MAPLIBRE_API_KEY={api_key}")
            print(f"MAPLIBRE_STYLE_URL=https://geo.klando-carpool.com/styles/carpool/style.json")
        
        return True
    else:
        print("‚ùå Probl√®me de connexion d√©tect√©")
        print("‚ùå V√©rifiez votre cl√© API")
        return False

def update_config():
    """Mettre √† jour la configuration MapLibre avec KLANDO_MAP_API_URL"""
    
    klando_url = os.environ.get('KLANDO_MAP_API_URL')
    klando_key = os.environ.get('KLANDO_API_KEY')
    
    if not klando_url and not klando_key:
        print("‚ùå Ni KLANDO_MAP_API_URL ni KLANDO_API_KEY trouv√©es")
        return
    
    print(f"\nüîß Mise √† jour de la configuration:")
    
    # Lire le fichier .env
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ùå Fichier .env non trouv√©")
        return
    
    lines = env_file.read_text().splitlines()
    updated_lines = []
    updated_maplibre_url = False
    updated_maplibre_key = False
    
    for line in lines:
        if line.startswith('MAPLIBRE_STYLE_URL='):
            if klando_url:
                updated_lines.append(f'MAPLIBRE_STYLE_URL={klando_url}')
                updated_maplibre_url = True
                print(f"   ‚úÖ MAPLIBRE_STYLE_URL mise √† jour avec KLANDO_MAP_API_URL")
            else:
                updated_lines.append('MAPLIBRE_STYLE_URL=https://geo.klando-carpool.com/styles/carpool/style.json')
                updated_maplibre_url = True
                print(f"   ‚úÖ MAPLIBRE_STYLE_URL mise √† jour")
        elif line.startswith('MAPLIBRE_API_KEY='):
            if klando_url:
                # Si on utilise l'URL avec cl√© int√©gr√©e, on peut vider MAPLIBRE_API_KEY
                updated_lines.append('# MAPLIBRE_API_KEY= # Cl√© int√©gr√©e dans MAPLIBRE_STYLE_URL')
                print(f"   ‚úÖ MAPLIBRE_API_KEY comment√©e (cl√© dans URL)")
            else:
                updated_lines.append(f'MAPLIBRE_API_KEY={klando_key}')
                print(f"   ‚úÖ MAPLIBRE_API_KEY mise √† jour")
            updated_maplibre_key = True
        else:
            updated_lines.append(line)
    
    # Ajouter les variables si elles n'existent pas
    if not updated_maplibre_url:
        if klando_url:
            updated_lines.append(f'MAPLIBRE_STYLE_URL={klando_url}')
            print(f"   ‚úÖ MAPLIBRE_STYLE_URL ajout√©e avec KLANDO_MAP_API_URL")
        else:
            updated_lines.append('MAPLIBRE_STYLE_URL=https://geo.klando-carpool.com/styles/carpool/style.json')
            print(f"   ‚úÖ MAPLIBRE_STYLE_URL ajout√©e")
    
    if not updated_maplibre_key:
        if klando_url:
            updated_lines.append('# MAPLIBRE_API_KEY= # Cl√© int√©gr√©e dans MAPLIBRE_STYLE_URL')
            print(f"   ‚úÖ MAPLIBRE_API_KEY comment√©e (cl√© dans URL)")
        else:
            updated_lines.append(f'MAPLIBRE_API_KEY={klando_key}')
            print(f"   ‚úÖ MAPLIBRE_API_KEY ajout√©e")
    
    # Sauvegarder
    env_file.write_text('\n'.join(updated_lines) + '\n')
    print(f"   üíæ Fichier .env sauvegard√©")

if __name__ == "__main__":
    print("üß™ Test de l'API Klando MapLibre")
    print("=" * 50)
    
    success = test_klando_api()
    
    if success:
        print(f"\nüéâ Test r√©ussi ! L'API fonctionne correctement.")
        
        # Proposer de mettre √† jour la config
        response = input("\n‚ùì Voulez-vous mettre √† jour la configuration MapLibre ? (y/N): ")
        if response.lower() in ['y', 'yes', 'oui', 'o']:
            update_config()
            print(f"\nüîÑ Red√©marrez l'application pour appliquer les changements.")
    else:
        print(f"\n‚ùå Test √©chou√©. V√©rifiez votre cl√© API.")
