#!/usr/bin/env python3
"""
Script de test pour valider les configurations de panneaux et r√©cup√©rer les donn√©es
Utilise les configurations JSON pour faire des requ√™tes et afficher les r√©sultats
"""

import sys
import os
import json
import pandas as pd
from typing import Dict, Any, Optional

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_panel_config():
    """Charge la configuration des panneaux depuis le fichier JSON"""
    config_path = os.path.join('dash_apps', 'config', 'panels_config.json')
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"[ERROR] Erreur chargement panels_config.json: {e}")
        return {}

def test_sql_fetcher(panel_name: str, panel_config: dict, trip_id: str):
    """Test du fetcher SQL pour un panneau donn√©"""
    print(f"\n=== Test SQL Fetcher pour {panel_name} ===")
    
    try:
        data_fetcher = panel_config.get('methods', {}).get('data_fetcher', {})
        sql_config = data_fetcher.get('sql_config', {})
        
        if not sql_config:
            print(f"‚úó Pas de configuration SQL pour {panel_name}")
            return None
        
        # Construire la requ√™te SQL
        main_table = sql_config.get('main_table')
        joins = sql_config.get('joins', [])
        fields = sql_config.get('fields', {})  # Utiliser 'fields' au lieu de 'columns'
        where_conditions = sql_config.get('where_conditions', [])
        filters = sql_config.get('filters', {})
        
        print(f"‚úì Table principale: {main_table}")
        print(f"‚úì Jointures: {len(joins)} tables")
        print(f"‚úì Champs: {len(fields)} champs")
        print(f"‚úì Conditions WHERE: {len(where_conditions)} conditions")
        print(f"‚úì Filtres: {len(filters)} filtres")
        
        # Construire SELECT
        select_parts = []
        for field_key, field_config in fields.items():
            table = field_config.get('table', main_table)
            column = field_config.get('column')
            alias = f"{field_key}"
            select_parts.append(f"{table}.{column} as {alias}")
        
        if not select_parts:
            print("‚ö†Ô∏è  Aucun champ d√©fini, utilisation de SELECT *")
            select_clause = "SELECT *"
        else:
            select_clause = "SELECT " + ", ".join(select_parts)
        
        # Construire FROM avec JOINs
        from_clause = f"FROM {main_table}"
        for join in joins:
            join_table = join.get('table')
            join_condition = join.get('condition')  # Utiliser 'condition' au lieu de 'on'
            join_type = join.get('type', 'LEFT')
            from_clause += f"\n{join_type} JOIN {join_table} ON {join_condition}"
        
        # Construire WHERE √† partir des where_conditions
        where_parts = []
        for condition in where_conditions:
            # Remplacer :trip_id par la valeur r√©elle
            condition_with_value = condition.replace(':trip_id', f"'{trip_id}'")
            where_parts.append(condition_with_value)
        
        # Ajouter les filtres si d√©finis
        for filter_key, filter_config in filters.items():
            if filter_key == 'trip_id':
                column = filter_config.get('column')
                operator = filter_config.get('operator', '=')
                where_parts.append(f"{column} {operator} '{trip_id}'")
        
        where_clause = ""
        if where_parts:
            where_clause = "WHERE " + " AND ".join(where_parts)
        
        # Requ√™te compl√®te
        full_query = f"{select_clause}\n{from_clause}"
        if where_clause:
            full_query += f"\n{where_clause}"
        
        print(f"\nüìã Requ√™te SQL g√©n√©r√©e:")
        print(f"{full_query}")
        
        # Tester l'ex√©cution avec le repository
        from dash_apps.repositories.repository_factory import RepositoryFactory
        from sqlalchemy import text
        
        trip_repository = RepositoryFactory.get_trip_repository()
        repo_type = type(trip_repository).__name__
        
        print(f"\nüîß Repository utilis√©: {repo_type}")
        
        if hasattr(trip_repository, 'session'):
            print("‚úì Repository SQL avec session - Ex√©cution de la requ√™te...")
            try:
                result = trip_repository.session.execute(text(full_query))
                rows = result.fetchall()
                
                if rows:
                    print(f"‚úì {len(rows)} r√©sultat(s) trouv√©(s)")
                    
                    # Afficher les donn√©es
                    for i, row in enumerate(rows):
                        print(f"\nüìä R√©sultat {i+1}:")
                        row_dict = dict(row._mapping)
                        for key, value in row_dict.items():
                            field_config = fields.get(key, {})
                            label = field_config.get('label', key)
                            print(f"  {label}: {value}")
                    
                    return rows[0] if rows else None
                else:
                    print("‚ö†Ô∏è  Aucun r√©sultat trouv√©")
                    return None
                    
            except Exception as e:
                print(f"‚úó Erreur ex√©cution SQL: {e}")
                return None
        else:
            print("‚ö†Ô∏è  Repository REST - Requ√™tes SQL non support√©es")
            return None
            
    except Exception as e:
        print(f"‚úó Erreur dans test_sql_fetcher: {e}")
        return None

def test_rest_fetcher(panel_name: str, panel_config: dict, trip_id: str):
    """Test du fetcher REST pour un panneau donn√©"""
    print(f"\n=== Test REST Fetcher pour {panel_name} ===")
    
    try:
        data_fetcher = panel_config.get('methods', {}).get('data_fetcher', {})
        rest_config = data_fetcher.get('rest_config', {})
        
        if not rest_config:
            print(f"‚úó Pas de configuration REST pour {panel_name}")
            return None
        
        api_module = rest_config.get('api_module')
        api_function = rest_config.get('api_function')
        
        print(f"‚úì Module API: {api_module}")
        print(f"‚úì Fonction API: {api_function}")
        
        # Tester l'import et l'ex√©cution
        try:
            module = __import__(api_module, fromlist=[api_function])
            api_func = getattr(module, api_function)
            
            print(f"‚úì Fonction import√©e avec succ√®s")
            
            # Ex√©cuter la fonction
            print(f"üîÑ Ex√©cution: {api_function}('{trip_id}')")
            result = api_func(trip_id)
            
            if result is not None:
                print(f"‚úì R√©sultat obtenu: {type(result)}")
                
                # Afficher les donn√©es selon le type
                if isinstance(result, pd.DataFrame):
                    print(f"üìä DataFrame: {len(result)} lignes, {len(result.columns)} colonnes")
                    if not result.empty:
                        print("Colonnes:", list(result.columns))
                        print("Premier enregistrement:")
                        for col in result.columns:
                            print(f"  {col}: {result.iloc[0][col]}")
                elif isinstance(result, dict):
                    print(f"üìä Dictionnaire: {len(result)} cl√©s")
                    for key, value in result.items():
                        print(f"  {key}: {value}")
                elif isinstance(result, list):
                    print(f"üìä Liste: {len(result)} √©l√©ments")
                    if result:
                        print(f"Premier √©l√©ment: {result[0]}")
                else:
                    print(f"üìä Donn√©es: {result}")
                
                return result
            else:
                print("‚ö†Ô∏è  Aucun r√©sultat retourn√©")
                return None
                
        except ImportError as e:
            print(f"‚úó Erreur import module {api_module}: {e}")
            return None
        except AttributeError as e:
            print(f"‚úó Fonction {api_function} non trouv√©e: {e}")
            return None
        except Exception as e:
            print(f"‚úó Erreur ex√©cution API: {e}")
            return None
            
    except Exception as e:
        print(f"‚úó Erreur dans test_rest_fetcher: {e}")
        return None

def test_panel_configuration(panel_name: str, panel_config: dict, trip_id: str):
    """Test complet d'un panneau avec sa configuration"""
    print(f"\n{'='*60}")
    print(f"TEST PANNEAU: {panel_name.upper()}")
    print(f"{'='*60}")
    
    # Informations g√©n√©rales
    description = panel_config.get('description', 'Aucune description')
    print(f"üìù Description: {description}")
    
    methods = panel_config.get('methods', {})
    if not methods:
        print("‚úó Aucune m√©thode configur√©e")
        return False
    
    # Configuration cache
    cache_config = methods.get('cache', {})
    if cache_config:
        print(f"üíæ Cache HTML: {'‚úì' if cache_config.get('html_cache_enabled') else '‚úó'}")
        print(f"üíæ Cache Redis: {'‚úì' if cache_config.get('redis_cache_enabled') else '‚úó'}")
        print(f"üíæ TTL: {cache_config.get('cache_ttl', 'Non d√©fini')}s")
    
    # Configuration data fetcher
    data_fetcher = methods.get('data_fetcher', {})
    if not data_fetcher:
        print("‚úó Aucun data fetcher configur√©")
        return False
    
    fetcher_type = data_fetcher.get('type')
    print(f"üîß Type de fetcher: {fetcher_type}")
    
    # Tester selon le type
    result = None
    if fetcher_type == 'sql':
        result = test_sql_fetcher(panel_name, panel_config, trip_id)
    elif fetcher_type == 'rest':
        result = test_rest_fetcher(panel_name, panel_config, trip_id)
    else:
        print(f"‚úó Type de fetcher non support√©: {fetcher_type}")
        return False
    
    # Configuration renderer
    renderer_config = methods.get('renderer', {})
    if renderer_config:
        print(f"\nüé® Renderer configur√©:")
        print(f"  Module: {renderer_config.get('module')}")
        print(f"  Fonction: {renderer_config.get('function')}")
        print(f"  Inputs requis: {renderer_config.get('required_inputs', [])}")
    
    success = result is not None
    print(f"\n{'‚úì SUCC√àS' if success else '‚úó √âCHEC'} - Panneau {panel_name}")
    
    return success

def main():
    """Fonction principale de test"""
    print("Script de Test des Configurations de Panneaux")
    print("=" * 60)
    
    # Charger la configuration
    config = load_panel_config()
    if not config:
        print("‚úó Impossible de charger la configuration")
        return False
    
    print(f"‚úì Configuration charg√©e: {len(config)} panneaux")
    
    # ID de trajet de test
    test_trip_id = "TRIP-1756910377933763-bk17O0BBAndQR7xxSZxDvAGkSWU2"
    print(f"üéØ Trajet de test: {test_trip_id}")
    
    # Tester chaque panneau
    results = {}
    for panel_name, panel_config in config.items():
        try:
            success = test_panel_configuration(panel_name, panel_config, test_trip_id)
            results[panel_name] = success
        except Exception as e:
            print(f"‚úó Erreur critique pour {panel_name}: {e}")
            results[panel_name] = False
    
    # R√©sum√© final
    print(f"\n{'='*60}")
    print("R√âSUM√â DES TESTS")
    print(f"{'='*60}")
    
    total_panels = len(results)
    successful_panels = sum(results.values())
    
    for panel_name, success in results.items():
        status = "‚úì R√âUSSI" if success else "‚úó √âCHOU√â"
        print(f"{panel_name:.<30} {status}")
    
    print(f"\nR√©sultat global: {successful_panels}/{total_panels} panneaux fonctionnels")
    
    if successful_panels == total_panels:
        print("üéâ Tous les panneaux sont correctement configur√©s!")
    elif successful_panels > 0:
        print("‚ö†Ô∏è  Certains panneaux n√©cessitent des corrections")
    else:
        print("‚ùå Aucun panneau ne fonctionne correctement")
    
    return successful_panels == total_panels

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
