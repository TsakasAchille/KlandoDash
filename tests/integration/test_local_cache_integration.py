#!/usr/bin/env python3
"""
Test d'int√©gration du syst√®me de cache local avec la configuration JSON
Valide le fonctionnement du cache local et son int√©gration avec TripsCacheService
"""

import json
import time
import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_cache_config_loading():
    """Test le chargement de la configuration du cache"""
    print("=== Test du chargement de la configuration cache ===")
    
    try:
        with open('dash_apps/config/cache_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print("‚úì Configuration charg√©e avec succ√®s")
        
        # V√©rifier la structure principale
        required_sections = ['cache_system', 'cache_types', 'storage_layers', 'cleanup_rules', 'monitoring']
        for section in required_sections:
            if section in config:
                print(f"‚úì Section '{section}' pr√©sente")
            else:
                print(f"‚úó Section '{section}' manquante")
                return False
        
        # V√©rifier les types de cache
        cache_types = config['cache_types']
        expected_types = ['trip_details', 'trip_stats', 'trip_passengers']
        for cache_type in expected_types:
            if cache_type in cache_types:
                cache_config = cache_types[cache_type]
                if all(key in cache_config for key in ['ttl', 'max_entries', 'key_pattern']):
                    print(f"‚úì Type de cache '{cache_type}' correctement configur√©")
                else:
                    print(f"‚úó Type de cache '{cache_type}' mal configur√©")
                    return False
            else:
                print(f"‚úó Type de cache '{cache_type}' manquant")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du chargement de la configuration: {e}")
        return False

def test_local_cache_service():
    """Test le service de cache local"""
    print("\n=== Test du service de cache local ===")
    
    try:
        from dash_apps.services.local_cache import LocalCache
        
        # Cr√©er une instance du cache local
        cache = LocalCache()
        print("‚úì Instance LocalCache cr√©√©e")
        
        # Test des op√©rations de base
        test_key = "test_trip_123"
        test_data = {"trip_id": "123", "status": "completed", "distance": 15.5}
        
        # Test set
        cache.set_trip_details(test_key, test_data, ttl_seconds=60)
        print("‚úì Donn√©es stock√©es dans le cache")
        
        # Test get
        cached_data = cache.get_trip_details(test_key)
        if cached_data == test_data:
            print("‚úì Donn√©es r√©cup√©r√©es correctement du cache")
        else:
            print(f"‚úó Donn√©es incorrectes: attendu {test_data}, re√ßu {cached_data}")
            return False
        
        # Test TTL
        cache.set_trip_details("test_ttl", {"test": "ttl"}, ttl_seconds=1)
        time.sleep(2)
        expired_data = cache.get_trip_details("test_ttl")
        if expired_data is None:
            print("‚úì TTL fonctionne correctement")
        else:
            print("‚úó TTL ne fonctionne pas")
            return False
        
        # Test des statistiques
        stats = cache.get_stats()
        if isinstance(stats, dict) and 'hits' in stats:
            print(f"‚úì Statistiques disponibles: {stats}")
        else:
            print("‚úó Statistiques non disponibles")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test du cache local: {e}")
        return False

def test_trips_cache_service_fallback():
    """Test le fallback du TripsCacheService vers le cache local"""
    print("\n=== Test du fallback TripsCacheService ===")
    
    try:
        from dash_apps.services.trips_cache_service import TripsCacheService
        
        # V√©rifier que le service peut √™tre import√©
        print("‚úì TripsCacheService import√© avec succ√®s")
        
        # V√©rifier la pr√©sence des m√©thodes de configuration
        if hasattr(TripsCacheService, '_load_panel_config'):
            print("‚úì M√©thode _load_panel_config pr√©sente")
        else:
            print("‚úó M√©thode _load_panel_config manquante")
            return False
        
        # Test du chargement de la configuration des panneaux
        try:
            config = TripsCacheService._load_panel_config()
            if isinstance(config, dict):
                print("‚úì Configuration des panneaux charg√©e")
                
                # V√©rifier la pr√©sence des panneaux attendus
                expected_panels = ['details', 'stats']  # Les cl√©s dans le JSON
                for panel_name in expected_panels:
                    if panel_name in config:
                        panel_config = config[panel_name]
                        if 'methods' in panel_config:
                            print(f"‚úì Panneau '{panel_name}' correctement configur√©")
                        else:
                            print(f"‚úó Panneau '{panel_name}' mal configur√©")
                    else:
                        print(f"‚úó Panneau '{panel_name}' manquant")
            else:
                print("‚úó Configuration des panneaux invalide")
                return False
        except Exception as e:
            print(f"‚úó Erreur lors du chargement de la configuration: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test du fallback: {e}")
        return False

def test_cache_integration():
    """Test d'int√©gration compl√®te du syst√®me de cache"""
    print("\n=== Test d'int√©gration compl√®te ===")
    
    try:
        # Simuler un sc√©nario d'utilisation r√©el
        from dash_apps.services.local_cache import LocalCache
        
        cache = LocalCache()
        
        # Simuler des donn√©es de trajets
        trip_data = {
            "trip_123": {
                "id": "123",
                "driver": "John Doe",
                "passengers": 3,
                "distance": 25.7,
                "status": "completed"
            },
            "trip_456": {
                "id": "456", 
                "driver": "Jane Smith",
                "passengers": 2,
                "distance": 18.3,
                "status": "in_progress"
            }
        }
        
        # Stocker les donn√©es avec diff√©rents TTL
        for trip_id, data in trip_data.items():
            cache.set_trip_details(trip_id, data, ttl_seconds=300)
            cache.set_trip_stats(trip_id, {
                "avg_speed": data["distance"] / 1.5,
                "efficiency": 0.85
            }, ttl_seconds=180)
        
        print(f"‚úì {len(trip_data)} trajets stock√©s dans le cache")
        
        # V√©rifier la r√©cup√©ration
        retrieved_count = 0
        for trip_id in trip_data.keys():
            details = cache.get_trip_details(trip_id)
            stats = cache.get_trip_stats(trip_id)
            
            if details and stats:
                retrieved_count += 1
        
        if retrieved_count == len(trip_data):
            print(f"‚úì Tous les trajets r√©cup√©r√©s correctement ({retrieved_count}/{len(trip_data)})")
        else:
            print(f"‚úó R√©cup√©ration incompl√®te ({retrieved_count}/{len(trip_data)})")
            return False
        
        # V√©rifier les statistiques finales
        final_stats = cache.get_stats()
        print(f"‚úì Statistiques finales: {final_stats}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test d'int√©gration: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("Test d'int√©gration du syst√®me de cache local")
    print("=" * 50)
    
    tests = [
        ("Configuration Cache", test_cache_config_loading),
        ("Service Cache Local", test_local_cache_service),
        ("Fallback TripsCacheService", test_trips_cache_service_fallback),
        ("Int√©gration Compl√®te", test_cache_integration)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚úó Erreur critique dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 50)
    print("R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úì R√âUSSI" if result else "‚úó √âCHOU√â"
        print(f"{test_name:.<30} {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat global: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s! Le syst√®me de cache local est pr√™t.")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
