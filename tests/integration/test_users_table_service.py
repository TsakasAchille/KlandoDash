"""
Test complet pour la r√©cup√©ration et l'affichage du tableau users avec syst√®me de logging avanc√©.
Test l'architecture refactoris√©e selon le pattern trips.
"""
import os
import sys
import pytest
import json
import time
from unittest.mock import Mock, patch, MagicMock
from datetime import datetime, date

# Ajouter le chemin du projet
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from dash_apps.services.users_table_service import UsersTableService
from dash_apps.models.config_models import UserModel
from dash_apps.utils.callback_logger import CallbackLogger


class TestUsersTableService:
    """Tests complets pour UsersTableService avec logging d√©taill√©."""
    
    @classmethod
    def setup_class(cls):
        """Configuration initiale des tests."""
        # Activer le debug pour les tests
        os.environ['DEBUG_USERS'] = 'true'
        
        # Nettoyer le cache avant les tests
        UsersTableService._local_cache.clear()
        UsersTableService._cache_timestamps.clear()
        
        print("\n" + "="*80)
        print("üß™ D√âMARRAGE DES TESTS USERS TABLE SERVICE")
        print("="*80)
        
        CallbackLogger.log_callback(
            "test_setup",
            {"test_class": "TestUsersTableService"},
            status="INFO",
            extra_info="Configuration des tests initialis√©e"
        )
    
    @classmethod
    def teardown_class(cls):
        """Nettoyage apr√®s les tests."""
        # Nettoyer le cache apr√®s les tests
        UsersTableService._local_cache.clear()
        UsersTableService._cache_timestamps.clear()
        
        print("\n" + "="*80)
        print("‚úÖ FIN DES TESTS USERS TABLE SERVICE")
        print("="*80)
        
        CallbackLogger.log_callback(
            "test_teardown",
            {"test_class": "TestUsersTableService"},
            status="INFO",
            extra_info="Tests termin√©s et cache nettoy√©"
        )
    
    def setup_method(self, method):
        """Configuration avant chaque test."""
        self.test_name = method.__name__
        print(f"\nüîç Test: {self.test_name}")
        print("-" * 60)
        
        CallbackLogger.log_callback(
            "test_start",
            {"test_method": self.test_name},
            status="INFO",
            extra_info=f"D√©marrage du test {self.test_name}"
        )
    
    def teardown_method(self, method):
        """Nettoyage apr√®s chaque test."""
        CallbackLogger.log_callback(
            "test_end",
            {"test_method": self.test_name},
            status="INFO",
            extra_info=f"Fin du test {self.test_name}"
        )
    
    def create_mock_user_data(self, uid: str, **kwargs) -> dict:
        """Cr√©e des donn√©es utilisateur de test avec logging."""
        default_data = {
            "uid": uid,
            "display_name": f"User {uid[-4:]}",
            "email": f"user{uid[-4:]}@test.com",
            "phone_number": f"+33612345{uid[-3:]}",
            "role": "passenger",
            "gender": "NOT_SPECIFIED",
            "rating": 4.5,
            "rating_count": 10,
            "created_at": datetime.now().isoformat(),
            "is_driver_doc_validated": False,
            "photo_url": f"https://example.com/photo_{uid}.jpg"
        }
        default_data.update(kwargs)
        
        CallbackLogger.log_callback(
            "mock_user_created",
            {"uid": uid[:8], "display_name": default_data["display_name"]},
            status="DEBUG",
            extra_info="Donn√©es utilisateur de test cr√©√©es"
        )
        
        return default_data
    
    def create_mock_supabase_response(self, users_data: list, total_count: int = None):
        """Cr√©e une r√©ponse Supabase mock√©e avec logging."""
        mock_response = Mock()
        mock_response.data = users_data
        mock_response.count = total_count or len(users_data)
        
        CallbackLogger.log_callback(
            "mock_supabase_response",
            {
                "users_count": len(users_data),
                "total_count": mock_response.count
            },
            status="DEBUG",
            extra_info="R√©ponse Supabase mock√©e cr√©√©e"
        )
        
        return mock_response
    
    @patch('dash_apps.utils.supabase_client.supabase')
    @patch('dash_apps.utils.settings.load_json_config')
    def test_get_users_page_basic(self, mock_load_config, mock_supabase):
        """Test de r√©cup√©ration basique d'une page d'utilisateurs."""
        print("üìã Test de r√©cup√©ration basique du tableau users")
        
        # Configuration mock
        mock_config = {
            "queries": {
                "users_paginated": {
                    "select": {
                        "base": ["uid", "display_name", "email", "role", "created_at"]
                    }
                }
            }
        }
        mock_load_config.return_value = mock_config
        
        # Donn√©es utilisateurs de test avec valeurs Pydantic valides
        test_users = [
            self.create_mock_user_data("user123", display_name="Alice Dupont", role="driver", gender="woman"),
            self.create_mock_user_data("user456", display_name="Bob Martin", role="passenger", gender="man"),
            self.create_mock_user_data("user789", display_name="Claire Durand", role="ADMIN", gender="woman")
        ]
        
        # Mock Supabase
        mock_query = Mock()
        mock_query.select.return_value = mock_query
        mock_query.range.return_value = mock_query
        mock_query.order.return_value = mock_query
        mock_query.execute.return_value = self.create_mock_supabase_response(test_users, 3)
        
        mock_supabase.table.return_value = mock_query
        
        CallbackLogger.log_callback(
            "test_basic_setup",
            {"users_count": len(test_users)},
            status="INFO",
            extra_info="Configuration du test basique termin√©e"
        )
        
        # Ex√©cution du test
        start_time = time.time()
        result = UsersTableService.get_users_page(page=1, page_size=10)
        execution_time = time.time() - start_time
        
        # V√©rifications avec logging d√©taill√©
        assert result is not None, "Le r√©sultat ne doit pas √™tre None"
        assert "users" in result, "Le r√©sultat doit contenir 'users'"
        assert "total_count" in result, "Le r√©sultat doit contenir 'total_count'"
        assert len(result["users"]) == 3, f"Attendu 3 users, re√ßu {len(result['users'])}"
        assert result["total_count"] == 3, f"Attendu total_count=3, re√ßu {result['total_count']}"
        
        CallbackLogger.log_callback(
            "test_basic_results",
            {
                "users_returned": len(result["users"]),
                "total_count": result["total_count"],
                "execution_time_ms": round(execution_time * 1000, 2),
                "has_next": result.get("has_next", False),
                "has_previous": result.get("has_previous", False)
            },
            status="SUCCESS",
            extra_info="Test basique r√©ussi - donn√©es r√©cup√©r√©es correctement"
        )
        
        # V√©rifier la structure des donn√©es utilisateur
        first_user = result["users"][0]
        expected_fields = ["uid", "display_name", "email", "role", "created_at"]
        for field in expected_fields:
            assert field in first_user, f"Champ manquant: {field}"
        
        print(f"‚úÖ Test basique r√©ussi - {len(result['users'])} utilisateurs r√©cup√©r√©s en {execution_time*1000:.2f}ms")
    
    @patch('dash_apps.utils.supabase_client.supabase')
    @patch('dash_apps.utils.settings.load_json_config')
    def test_get_users_page_with_filters(self, mock_load_config, mock_supabase):
        """Test de r√©cup√©ration avec filtres."""
        print("üîç Test de r√©cup√©ration avec filtres")
        
        # Configuration mock
        mock_config = {
            "queries": {
                "users_paginated": {
                    "select": {
                        "base": ["uid", "display_name", "email", "role", "gender"]
                    }
                },
                "users_search": {
                    "filters": {
                        "text_search": {
                            "fields": ["display_name", "email", "first_name", "name"]
                        }
                    }
                }
            }
        }
        mock_load_config.return_value = mock_config
        
        # Donn√©es de test filtr√©es avec valeurs Pydantic valides
        filtered_users = [
            self.create_mock_user_data("driver001", display_name="Alice Driver", role="driver", gender="woman"),
            self.create_mock_user_data("driver002", display_name="Bob Driver", role="driver", gender="man")
        ]
        
        # Mock Supabase avec filtres
        mock_query = Mock()
        mock_query.select.return_value = mock_query
        mock_query.eq.return_value = mock_query
        mock_query.or_.return_value = mock_query
        mock_query.range.return_value = mock_query
        mock_query.order.return_value = mock_query
        mock_query.execute.return_value = self.create_mock_supabase_response(filtered_users, 2)
        
        mock_supabase.table.return_value = mock_query
        
        # Test avec filtres
        filters = {
            "role": "driver",
            "gender": "all",
            "text": "Driver"
        }
        
        CallbackLogger.log_callback(
            "test_filters_setup",
            {"filters": filters, "expected_results": len(filtered_users)},
            status="INFO",
            extra_info="Configuration du test avec filtres"
        )
        
        start_time = time.time()
        result = UsersTableService.get_users_page(page=1, page_size=10, filters=filters)
        execution_time = time.time() - start_time
        
        # V√©rifications
        assert len(result["users"]) == 2, f"Attendu 2 conducteurs, re√ßu {len(result['users'])}"
        
        for user in result["users"]:
            assert user["role"] == "driver", f"Utilisateur {user['uid']} n'est pas conducteur"
            assert "Driver" in user["display_name"], f"Nom {user['display_name']} ne contient pas 'Driver'"
        
        CallbackLogger.log_callback(
            "test_filters_results",
            {
                "filtered_users": len(result["users"]),
                "execution_time_ms": round(execution_time * 1000, 2),
                "filters_applied": filters
            },
            status="SUCCESS",
            extra_info="Test avec filtres r√©ussi"
        )
        
        print(f"‚úÖ Test filtres r√©ussi - {len(result['users'])} conducteurs trouv√©s en {execution_time*1000:.2f}ms")
    
    def test_cache_functionality(self):
        """Test du syst√®me de cache local."""
        print("üíæ Test du syst√®me de cache")
        
        # Nettoyer le cache
        UsersTableService._local_cache.clear()
        UsersTableService._cache_timestamps.clear()
        
        # Donn√©es de test
        test_data = {
            "users": [{"uid": "test123", "display_name": "Test User"}],
            "total_count": 1,
            "page": 1
        }
        
        cache_key = "test_cache_key"
        
        CallbackLogger.log_callback(
            "test_cache_setup",
            {"cache_key": cache_key},
            status="INFO",
            extra_info="Test du cache - donn√©es pr√©par√©es"
        )
        
        # Test mise en cache
        UsersTableService._set_to_local_cache(cache_key, test_data)
        
        assert cache_key in UsersTableService._local_cache, "Donn√©es non mises en cache"
        assert cache_key in UsersTableService._cache_timestamps, "Timestamp de cache manquant"
        
        # Test r√©cup√©ration du cache
        cached_data = UsersTableService._get_from_local_cache(cache_key)
        
        assert cached_data is not None, "Donn√©es non r√©cup√©r√©es du cache"
        assert cached_data["users"][0]["uid"] == "test123", "Donn√©es du cache incorrectes"
        
        CallbackLogger.log_callback(
            "test_cache_results",
            {
                "cache_hit": cached_data is not None,
                "cache_size": len(UsersTableService._local_cache),
                "data_integrity": cached_data["users"][0]["uid"] == "test123"
            },
            status="SUCCESS",
            extra_info="Test cache r√©ussi - donn√©es stock√©es et r√©cup√©r√©es"
        )
        
        print("‚úÖ Test cache r√©ussi - donn√©es stock√©es et r√©cup√©r√©es correctement")
    
    def test_cache_expiration(self):
        """Test de l'expiration du cache."""
        print("‚è∞ Test d'expiration du cache")
        
        # Nettoyer le cache
        UsersTableService._local_cache.clear()
        UsersTableService._cache_timestamps.clear()
        
        # Modifier temporairement le TTL pour le test
        original_ttl = UsersTableService.LOCAL_CACHE_TTL
        UsersTableService.LOCAL_CACHE_TTL = 0.1  # 100ms
        
        test_data = {"test": "data"}
        cache_key = "expiration_test"
        
        CallbackLogger.log_callback(
            "test_expiration_setup",
            {"ttl_seconds": UsersTableService.LOCAL_CACHE_TTL},
            status="INFO",
            extra_info="Test expiration - TTL r√©duit pour le test"
        )
        
        # Mettre en cache
        UsersTableService._set_to_local_cache(cache_key, test_data)
        
        # V√©rifier que les donn√©es sont en cache
        cached_data = UsersTableService._get_from_local_cache(cache_key)
        assert cached_data is not None, "Donn√©es devraient √™tre en cache"
        
        # Attendre l'expiration
        time.sleep(0.2)
        
        # V√©rifier que les donn√©es ont expir√©
        expired_data = UsersTableService._get_from_local_cache(cache_key)
        assert expired_data is None, "Donn√©es devraient avoir expir√©"
        
        # Restaurer le TTL original
        UsersTableService.LOCAL_CACHE_TTL = original_ttl
        
        CallbackLogger.log_callback(
            "test_expiration_results",
            {
                "cache_before_expiration": cached_data is not None,
                "cache_after_expiration": expired_data is None,
                "ttl_restored": UsersTableService.LOCAL_CACHE_TTL == original_ttl
            },
            status="SUCCESS",
            extra_info="Test expiration r√©ussi - cache expir√© correctement"
        )
        
        print("‚úÖ Test expiration r√©ussi - cache expir√© apr√®s TTL")
    
    def test_pydantic_validation(self):
        """Test de la validation Pydantic."""
        print("üîí Test de validation Pydantic")
        
        # Donn√©es valides
        valid_data = {
            "uid": "valid123",
            "display_name": "Valid User",
            "email": "valid@test.com",
            "role": "passenger",
            "created_at": datetime.now()
        }
        
        # Donn√©es invalides
        invalid_data = {
            "uid": "",  # UID vide - invalide
            "email": "invalid-email",  # Email invalide
            "rating": 6.0  # Rating > 5.0 - invalide
        }
        
        CallbackLogger.log_callback(
            "test_validation_setup",
            {"valid_fields": len(valid_data), "invalid_fields": len(invalid_data)},
            status="INFO",
            extra_info="Test validation - donn√©es pr√©par√©es"
        )
        
        # Test validation r√©ussie
        try:
            valid_user = UserModel(**valid_data)
            validation_success = True
            
            # Test model_dump()
            if hasattr(valid_user, 'model_dump'):
                user_dict = valid_user.model_dump()
                model_dump_success = True
            else:
                model_dump_success = False
                
        except Exception as e:
            validation_success = False
            model_dump_success = False
            CallbackLogger.log_callback(
                "validation_error",
                {"error": str(e)},
                status="ERROR",
                extra_info="Erreur validation donn√©es valides"
            )
        
        # Test validation √©chou√©e
        validation_failed = False
        try:
            invalid_user = UserModel(**invalid_data)
        except Exception as e:
            validation_failed = True
            CallbackLogger.log_callback(
                "validation_expected_failure",
                {"error": str(e)},
                status="INFO",
                extra_info="Validation √©chou√©e comme attendu pour donn√©es invalides"
            )
        
        assert validation_success, "Validation des donn√©es valides a √©chou√©"
        assert model_dump_success, "model_dump() non disponible"
        assert validation_failed, "Validation des donn√©es invalides aurait d√ª √©chouer"
        
        CallbackLogger.log_callback(
            "test_validation_results",
            {
                "valid_data_passed": validation_success,
                "model_dump_available": model_dump_success,
                "invalid_data_rejected": validation_failed
            },
            status="SUCCESS",
            extra_info="Test validation r√©ussi - Pydantic fonctionne correctement"
        )
        
        print("‚úÖ Test validation r√©ussi - Pydantic valide correctement")
    
    def test_error_handling(self):
        """Test de la gestion d'erreurs."""
        print("‚ö†Ô∏è Test de gestion d'erreurs")
        
        CallbackLogger.log_callback(
            "test_error_handling_start",
            {},
            status="INFO",
            extra_info="Test gestion d'erreurs - simulation d'erreurs"
        )
        
        # Test avec UID vide
        result_empty_uid = UsersTableService.get_users_page(page=1, page_size=10, filters={"uid": ""})
        
        # Test avec page n√©gative
        result_negative_page = UsersTableService.get_users_page(page=-1, page_size=10)
        
        # Test avec page_size trop grand
        result_large_page_size = UsersTableService.get_users_page(page=1, page_size=1000)
        
        # V√©rifier que les erreurs sont g√©r√©es gracieusement
        assert isinstance(result_empty_uid, dict), "R√©sultat doit √™tre un dict m√™me en cas d'erreur"
        assert isinstance(result_negative_page, dict), "R√©sultat doit √™tre un dict m√™me en cas d'erreur"
        assert isinstance(result_large_page_size, dict), "R√©sultat doit √™tre un dict m√™me en cas d'erreur"
        
        CallbackLogger.log_callback(
            "test_error_handling_results",
            {
                "empty_uid_handled": isinstance(result_empty_uid, dict),
                "negative_page_handled": isinstance(result_negative_page, dict),
                "large_page_size_handled": isinstance(result_large_page_size, dict)
            },
            status="SUCCESS",
            extra_info="Test gestion d'erreurs r√©ussi - erreurs g√©r√©es gracieusement"
        )
        
        print("‚úÖ Test gestion d'erreurs r√©ussi - erreurs g√©r√©es gracieusement")


def run_users_table_tests():
    """Lance tous les tests avec un rapport d√©taill√©."""
    print("\n" + "üöÄ LANCEMENT DES TESTS USERS TABLE SERVICE")
    print("=" * 80)
    
    # Activer le debug
    os.environ['DEBUG_USERS'] = 'true'
    
    start_time = time.time()
    
    try:
        # Lancer les tests
        pytest.main([
            __file__,
            "-v",
            "--tb=short",
            "--capture=no"
        ])
        
        execution_time = time.time() - start_time
        
        CallbackLogger.log_callback(
            "all_tests_completed",
            {
                "total_execution_time_seconds": round(execution_time, 2),
                "test_file": __file__
            },
            status="SUCCESS",
            extra_info="Tous les tests termin√©s avec succ√®s"
        )
        
        print(f"\n‚úÖ TOUS LES TESTS TERMIN√âS EN {execution_time:.2f}s")
        print("=" * 80)
        
    except Exception as e:
        CallbackLogger.log_callback(
            "tests_failed",
            {"error": str(e)},
            status="ERROR",
            extra_info="√âchec des tests"
        )
        print(f"\n‚ùå √âCHEC DES TESTS: {e}")
        raise


if __name__ == "__main__":
    run_users_table_tests()
