#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'affichage des panneaux trip_details et trip_driver
Simule un clic sur un trajet et v√©rifie que les donn√©es s'affichent correctement
"""
import os
import sys
import time
from typing import Dict, Any, Optional

# Ajouter le chemin du projet
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

# Activer le debug pour voir tous les logs
os.environ['DEBUG_TRIPS'] = 'true'

from dash_apps.services.trip_details_cache_service import TripDetailsCache
from dash_apps.services.trip_driver_cache_service import TripDriverCache
from dash_apps.utils.settings import get_jinja_template
from dash_apps.utils.settings import load_json_config

def print_separator(title: str):
    """Affiche un s√©parateur avec titre"""
    print("\n" + "="*80)
    print(f"üîß {title}")
    print("="*80)

def print_step(step: str, status: str = "INFO"):
    """Affiche une √©tape avec statut"""
    emoji = "‚úÖ" if status == "SUCCESS" else "‚ùå" if status == "ERROR" else "üîç"
    print(f"{emoji} {step}")

def test_panels_display():
    """Test de l'affichage des panneaux avec vraies donn√©es"""
    
    # ID de test
    test_trip_id = "TRIP-1757688627290606-n739xt2Uy0Qb5hP30AJ1G3dnT8G3"
    
    print_separator("TEST D'AFFICHAGE DES PANNEAUX")
    print(f"üéØ Trip ID de test: {test_trip_id}")
    
    # ========================================
    # √âTAPE 1: R√âCUP√âRER LES DONN√âES TRIP DETAILS
    # ========================================
    print_separator("√âTAPE 1: R√âCUP√âRATION DONN√âES TRIP DETAILS")
    
    try:
        trip_data = TripDetailsCache.get_trip_details_data(test_trip_id)
        
        if trip_data:
            print_step("‚úÖ Donn√©es trip_details r√©cup√©r√©es", "SUCCESS")
            print(f"   - ID: {trip_data.get('id', 'N/A')}")
            print(f"   - D√©part: {trip_data.get('departure_name', 'N/A')}")
            print(f"   - Destination: {trip_data.get('destination_name', 'N/A')}")
            print(f"   - Date: {trip_data.get('departure_date', 'N/A')}")
            print(f"   - Heure: {trip_data.get('departure_schedule', 'N/A')}")
            print(f"   - Prix: {trip_data.get('price_per_seat', 'N/A')}")
            print(f"   - Places: {trip_data.get('seats_published', 'N/A')}")
            print(f"   - Statut: {trip_data.get('status', 'N/A')}")
        else:
            print_step("‚ùå Aucune donn√©e trip_details", "ERROR")
            return False
            
    except Exception as e:
        print_step(f"‚ùå Erreur trip_details: {e}", "ERROR")
        return False
    
    # ========================================
    # √âTAPE 2: R√âCUP√âRER LES DONN√âES DRIVER
    # ========================================
    print_separator("√âTAPE 2: R√âCUP√âRATION DONN√âES DRIVER")
    
    try:
        driver_data = TripDriverCache.get_trip_driver_data(test_trip_id)
        
        if driver_data:
            print_step("‚úÖ Donn√©es driver r√©cup√©r√©es", "SUCCESS")
            print(f"   - Nom: {driver_data.get('name', 'N/A')}")
            print(f"   - Email: {driver_data.get('email', 'N/A')}")
            print(f"   - T√©l√©phone: {driver_data.get('phone', 'N/A')}")
            print(f"   - Note: {driver_data.get('driver_rating', 'N/A')}")
        else:
            print_step("‚ùå Aucune donn√©e driver", "ERROR")
            return False
            
    except Exception as e:
        print_step(f"‚ùå Erreur driver: {e}", "ERROR")
        return False
    
    # ========================================
    # √âTAPE 3: TESTER LE TEMPLATE TRIP DETAILS
    # ========================================
    print_separator("√âTAPE 3: TEST TEMPLATE TRIP DETAILS")
    
    try:
        config = load_json_config('trip_details_config.json')
        details_template = get_jinja_template('trip_details_template.jinja2')
        
        details_html = details_template.render(
            trip=trip_data,
            config=config.get('trip_details', {}),
            layout={
                'card_height': '350px',
                'card_width': '100%',
                'card_min_height': '300px'
            }
        )
        
        print_step("‚úÖ Template trip_details rendu", "SUCCESS")
        print(f"   - Taille HTML: {len(details_html)} caract√®res")
        
        # V√©rifier que les donn√©es sont dans le HTML
        if trip_data.get('departure_name', '') in details_html:
            print_step("‚úÖ Donn√©es d√©part trouv√©es dans HTML", "SUCCESS")
        else:
            print_step("‚ùå Donn√©es d√©part manquantes dans HTML", "ERROR")
            
        if trip_data.get('destination_name', '') in details_html:
            print_step("‚úÖ Donn√©es destination trouv√©es dans HTML", "SUCCESS")
        else:
            print_step("‚ùå Donn√©es destination manquantes dans HTML", "ERROR")
            
    except Exception as e:
        print_step(f"‚ùå Erreur template trip_details: {e}", "ERROR")
        import traceback
        traceback.print_exc()
        return False
    
    # ========================================
    # √âTAPE 4: TESTER LE TEMPLATE DRIVER
    # ========================================
    print_separator("√âTAPE 4: TEST TEMPLATE DRIVER")
    
    try:
        config = load_json_config('trip_driver_config.json')
        driver_template = get_jinja_template('trip_driver_template_dynamic.jinja2')
        
        driver_html = driver_template.render(
            trip=driver_data,
            config=config.get('trip_driver', {}),
            layout={
                'card_height': '450px',
                'card_width': '50%',
                'card_min_height': '400px'
            }
        )
        
        print_step("‚úÖ Template driver rendu", "SUCCESS")
        print(f"   - Taille HTML: {len(driver_html)} caract√®res")
        
        # V√©rifier que les donn√©es sont dans le HTML
        if driver_data.get('name', '') in driver_html:
            print_step("‚úÖ Nom conducteur trouv√© dans HTML", "SUCCESS")
        else:
            print_step("‚ùå Nom conducteur manquant dans HTML", "ERROR")
            
        if driver_data.get('email', '') in driver_html:
            print_step("‚úÖ Email conducteur trouv√© dans HTML", "SUCCESS")
        else:
            print_step("‚ùå Email conducteur manquant dans HTML", "ERROR")
            
    except Exception as e:
        print_step(f"‚ùå Erreur template driver: {e}", "ERROR")
        import traceback
        traceback.print_exc()
        return False
    
    # ========================================
    # √âTAPE 5: AFFICHER UN √âCHANTILLON DES TEMPLATES
    # ========================================
    print_separator("√âTAPE 5: √âCHANTILLON DES TEMPLATES G√âN√âR√âS")
    
    print("üìÑ TRIP DETAILS HTML (premiers 500 caract√®res):")
    print("-" * 60)
    print(details_html[:500])
    print("-" * 60)
    
    print("\nüìÑ DRIVER HTML (premiers 500 caract√®res):")
    print("-" * 60)
    print(driver_html[:500])
    print("-" * 60)
    
    # ========================================
    # R√âSUM√â
    # ========================================
    print_separator("R√âSUM√â DU TEST")
    
    print_step("‚úÖ Donn√©es trip_details r√©cup√©r√©es et valides", "SUCCESS")
    print_step("‚úÖ Donn√©es driver r√©cup√©r√©es et valides", "SUCCESS")
    print_step("‚úÖ Templates rendus avec succ√®s", "SUCCESS")
    print_step("‚úÖ Donn√©es pr√©sentes dans les templates HTML", "SUCCESS")
    
    print("\nüéâ LES PANNEAUX DEVRAIENT AFFICHER LES VRAIES DONN√âES!")
    print("üí° Si vous voyez encore des tirets, v√©rifiez:")
    print("   1. Que le trip_id s√©lectionn√© correspond √† celui test√©")
    print("   2. Que les callbacks utilisent bien les m√™mes services de cache")
    print("   3. Que les templates Jinja2 sont bien charg√©s")
    
    return True

def main():
    """Point d'entr√©e principal"""
    try:
        result = test_panels_display()
        
        if result:
            print("\n‚úÖ TEST D'AFFICHAGE TERMIN√â AVEC SUCC√àS")
            sys.exit(0)
        else:
            print("\n‚ùå TEST D'AFFICHAGE √âCHOU√â")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Test interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ERREUR FATALE: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
