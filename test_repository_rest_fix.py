#!/usr/bin/env python3
"""
Test de validation de la correction du repository REST dans SQLQueryBuilder
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_sql_query_builder_with_rest_repository():
    """Test que SQLQueryBuilder g√®re correctement les repositories REST"""
    print("=== Test SQLQueryBuilder avec Repository REST ===")
    
    try:
        from dash_apps.services.sql_query_builder import SQLQueryBuilder
        from dash_apps.repositories.repository_factory import RepositoryFactory
        
        # V√©rifier le type de repository
        trip_repository = RepositoryFactory.get_trip_repository()
        repo_type = type(trip_repository).__name__
        print(f"‚úì Repository d√©tect√©: {repo_type}")
        
        # Test execute_raw_query avec repository REST
        test_query = "SELECT * FROM trips LIMIT 1"
        result = SQLQueryBuilder.execute_raw_query(test_query)
        
        if repo_type == 'TripRepositoryRest':
            # Avec repository REST, on s'attend √† None (pas d'erreur)
            if result is None:
                print("‚úì Repository REST correctement g√©r√© - requ√™te SQL ignor√©e")
            else:
                print("‚úó Repository REST mal g√©r√© - r√©sultat inattendu")
                return False
        else:
            # Avec repository SQL, on peut avoir des r√©sultats
            print(f"‚úì Repository SQL - r√©sultat: {type(result)}")
        
        # Test execute_panel_query avec repository REST
        panel_result = SQLQueryBuilder.execute_panel_query('details', 'test_trip_id')
        
        if repo_type == 'TripRepositoryRest':
            if panel_result is None:
                print("‚úì Panel query correctement g√©r√© avec repository REST")
            else:
                print("‚úó Panel query mal g√©r√© avec repository REST")
                return False
        else:
            print(f"‚úì Panel query avec repository SQL - r√©sultat: {type(panel_result)}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test: {e}")
        return False

def test_trips_cache_service_with_rest():
    """Test que TripsCacheService fonctionne avec repository REST"""
    print("\n=== Test TripsCacheService avec Repository REST ===")
    
    try:
        from dash_apps.services.trips_cache_service import TripsCacheService
        
        # Test de la m√©thode g√©n√©rique
        if hasattr(TripsCacheService, '_execute_sql_fetcher'):
            print("‚úì M√©thode _execute_sql_fetcher pr√©sente")
        else:
            print("‚úó M√©thode _execute_sql_fetcher manquante")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test TripsCacheService: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("Test de validation des corrections Repository REST")
    print("=" * 55)
    
    tests = [
        ("SQLQueryBuilder avec REST", test_sql_query_builder_with_rest_repository),
        ("TripsCacheService avec REST", test_trips_cache_service_with_rest)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚úó Erreur critique dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 55)
    print("R√âSUM√â DES TESTS")
    print("=" * 55)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úì R√âUSSI" if result else "‚úó √âCHOU√â"
        print(f"{test_name:.<35} {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat global: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Corrections Repository REST valid√©es!")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
