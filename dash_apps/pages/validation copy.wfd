@startuml
actor Admin
participant "Bouton Valider (validate-docs)" as Button
participant "Callback validate_driver_documents" as CallbackValidate
participant "UserRepository" as Repo
participant "Base de données" as DB

== Clic sur le bouton ==
Admin -> Button : Clique sur “Valider/Dévalider”
Button -> CallbackValidate : n_clicks, button_id={"type":"validate-docs", "index":uid}

== Récupération de l'UID ==
CallbackValidate -> CallbackValidate : Extrait uid = button_id["index"]

== Lecture du statut utilisateur ==
CallbackValidate -> Repo : get_user_by_id(uid)
Repo -> DB : SELECT * FROM users WHERE uid=?
DB --> Repo : Objet User (avec is_driver_doc_validated)
Repo --> CallbackValidate : UserSchema (avec statut)

== Décision selon le statut ==
alt Si is_driver_doc_validated == True
    CallbackValidate -> Repo : unvalidate_driver_documents(uid)
    Repo -> DB : UPDATE ... SET is_driver_doc_validated=FALSE
    DB --> Repo : OK
    Repo --> CallbackValidate : True/False
else Si is_driver_doc_validated == False
    CallbackValidate -> Repo : validate_driver_documents(uid)
    Repo -> DB : UPDATE ... SET is_driver_doc_validated=TRUE
    DB --> Repo : OK
    Repo --> CallbackValidate : True/False
end

CallbackValidate --> Button : Met à jour le texte et l'état du bouton
@enduml