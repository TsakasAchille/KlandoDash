
// DIAGNOSTIC MAPLIBRE - Inject√© par Python
console.log('üîç [DIAGNOSTIC] Script de diagnostic charg√©');

// V√©rifier MapLibre GL JS
if (typeof maplibregl === 'undefined') {
    console.error('‚ùå [DIAGNOSTIC] MapLibre GL JS non charg√©');
} else {
    console.log('‚úÖ [DIAGNOSTIC] MapLibre GL JS version:', maplibregl.version);
}

// V√©rifier les containers
function checkContainers() {
    const containers = document.querySelectorAll('.maplibre-container');
    console.log(`üîç [DIAGNOSTIC] Containers trouv√©s: ${containers.length}`);
    
    containers.forEach((container, index) => {
        console.log(`üì¶ [DIAGNOSTIC] Container ${index}:`, {
            id: container.id,
            className: container.className,
            styleUrl: container.getAttribute('data-style-url'),
            apiKey: container.getAttribute('data-api-key') ? '***' : 'Non d√©finie',
            mapInited: container.dataset.mapInited,
            hasMap: !!container.__map
        });
    });
    
    return containers.length;
}

// V√©rifier imm√©diatement
checkContainers();

// Observer les changements DOM
const observer = new MutationObserver(() => {
    console.log('üîÑ [DIAGNOSTIC] DOM modifi√©, re-v√©rification...');
    checkContainers();
});

observer.observe(document.body, {
    childList: true,
    subtree: true
});

// Forcer l'initialisation apr√®s 2 secondes
setTimeout(() => {
    console.log('‚è∞ [DIAGNOSTIC] Timeout - Forcer initialisation');
    const containers = document.querySelectorAll('.maplibre-container');
    
    if (containers.length === 0) {
        console.error('‚ùå [DIAGNOSTIC] Aucun container trouv√© apr√®s 2s');
        return;
    }
    
    containers.forEach(container => {
        if (!container.__map && typeof maplibregl !== 'undefined') {
            console.log('üöÄ [DIAGNOSTIC] Initialisation forc√©e pour:', container.id);
            
            try {
                const map = new maplibregl.Map({
                    container: container,
                    style: 'https://demotiles.maplibre.org/style.json',
                    center: [0, 0],
                    zoom: 2
                });
                
                map.on('load', () => {
                    console.log('‚úÖ [DIAGNOSTIC] Carte charg√©e avec succ√®s!');
                });
                
                map.on('error', (e) => {
                    console.error('‚ùå [DIAGNOSTIC] Erreur carte:', e);
                });
                
            } catch (error) {
                console.error('‚ùå [DIAGNOSTIC] Erreur initialisation:', error);
            }
        }
    });
}, 2000);

console.log('üîç [DIAGNOSTIC] Script de diagnostic configur√©');
