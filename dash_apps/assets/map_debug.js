
// DIAGNOSTIC MAPLIBRE - Inject√© par Python
console.log('üîç [DIAGNOSTIC] Script de diagnostic charg√©');

// V√©rifier MapLibre GL JS
if (typeof maplibregl === 'undefined') {
    console.error('‚ùå [DIAGNOSTIC] MapLibre GL JS non charg√©');
} else {
    console.log('‚úÖ [DIAGNOSTIC] MapLibre GL JS version:', maplibregl.version);
}

// V√©rifier les containers
function checkContainers() {
    const containers = document.querySelectorAll('.maplibre-container');
    console.log(`üîç [DIAGNOSTIC] Containers trouv√©s: ${containers.length}`);
    
    containers.forEach((container, index) => {
        console.log(`üì¶ [DIAGNOSTIC] Container ${index}:`, {
            id: container.id,
            className: container.className,
            styleUrl: container.getAttribute('data-style-url'),
            apiKey: container.getAttribute('data-api-key') ? '***' : 'Non d√©finie',
            mapInited: container.dataset.mapInited,
            hasMap: !!container.__map
        });
    });
    
    return containers.length;
}

// V√©rifier imm√©diatement
checkContainers();

// Observer les changements DOM - optimis√© pour √©viter le spam
let observerTimeout = null;
const observer = new MutationObserver(() => {
    // Debounce les v√©rifications pour √©viter le spam
    if (observerTimeout) {
        clearTimeout(observerTimeout);
    }
    
    observerTimeout = setTimeout(() => {
        console.log('üîÑ [DIAGNOSTIC] DOM modifi√©, re-v√©rification...');
        const containerCount = checkContainers();
        
        // Arr√™ter l'observation si des containers sont trouv√©s et initialis√©s
        if (containerCount > 0) {
            const containers = document.querySelectorAll('.maplibre-container');
            const initializedContainers = Array.from(containers).filter(c => c.__map || c.dataset.mapInited);
            
            if (initializedContainers.length > 0) {
                observer.disconnect();
                console.log('üîç [DIAGNOSTIC] Observer arr√™t√© - containers initialis√©s d√©tect√©s');
            }
        }
    }, 500); // Debounce de 500ms
});

observer.observe(document.body, {
    childList: true,
    subtree: true
});

// Forcer l'initialisation apr√®s 5 secondes (r√©duit la fr√©quence)
setTimeout(() => {
    console.log('‚è∞ [DIAGNOSTIC] Timeout - V√©rification finale des containers');
    const containers = document.querySelectorAll('.maplibre-container');
    
    if (containers.length === 0) {
        console.error('‚ùå [DIAGNOSTIC] Aucun container trouv√© apr√®s 5s');
        return;
    }
    
    // Seulement initialiser si aucune carte n'existe d√©j√†
    const uninitializedContainers = Array.from(containers).filter(c => !c.__map && !c.dataset.mapInited);
    
    if (uninitializedContainers.length === 0) {
        console.log('‚úÖ [DIAGNOSTIC] Tous les containers sont d√©j√† initialis√©s');
        return;
    }
    
    uninitializedContainers.forEach(container => {
        if (typeof maplibregl !== 'undefined') {
            console.log('üöÄ [DIAGNOSTIC] Initialisation forc√©e pour:', container.id);
            
            try {
                const map = new maplibregl.Map({
                    container: container,
                    style: 'https://demotiles.maplibre.org/style.json',
                    center: [0, 0],
                    zoom: 2
                });
                
                // Marquer le container comme initialis√©
                container.dataset.mapInited = 'true';
                container.__map = map;
                
                map.on('load', () => {
                    console.log('‚úÖ [DIAGNOSTIC] Carte charg√©e avec succ√®s!');
                });
                
                map.on('error', (e) => {
                    console.error('‚ùå [DIAGNOSTIC] Erreur carte:', e);
                });
                
            } catch (error) {
                console.error('‚ùå [DIAGNOSTIC] Erreur initialisation:', error);
            }
        }
    });
}, 5000); // Augment√© de 2s √† 5s

console.log('üîç [DIAGNOSTIC] Script de diagnostic configur√©');
