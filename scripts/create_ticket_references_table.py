#!/usr/bin/env python3
"""
Script pour cr√©er la table ticket_references dans la base de donn√©es
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from dash_apps.core.database import get_engine, Base
from dash_apps.models.ticket_reference import TicketReference

def create_ticket_references_table():
    """Cr√©e la table ticket_references"""
    
    print("üîß Cr√©ation de la table ticket_references")
    print("=" * 45)
    
    try:
        # R√©cup√©rer l'engine de base de donn√©es
        engine = get_engine()
        
        # Cr√©er la table
        TicketReference.__table__.create(engine, checkfirst=True)
        
        print("‚úÖ Table ticket_references cr√©√©e avec succ√®s")
        print("üìã Colonnes:")
        print("  - reference_token (VARCHAR(20), PRIMARY KEY)")
        print("  - ticket_id (VARCHAR(36), UNIQUE)")
        print("  - created_at (DATETIME)")
        print("  - expires_at (DATETIME, NULLABLE)")
        print("üìä Index:")
        print("  - idx_ticket_references_ticket_id")
        print("  - idx_ticket_references_token")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        return False

def test_token_generation():
    """Test de g√©n√©ration de tokens"""
    
    print("\nüß™ Test de g√©n√©ration de tokens")
    print("=" * 30)
    
    try:
        from dash_apps.services.ticket_reference_service import TicketReferenceService
        
        # Test avec le ticket existant
        test_ticket_id = "4e4745ab-9aff-4025-b003-16a2f99ff300"
        
        print(f"üìù Cr√©ation token pour ticket: {test_ticket_id[:8]}...")
        token = TicketReferenceService.create_reference_mapping(test_ticket_id)
        
        if token:
            print(f"‚úÖ Token cr√©√©: {token}")
            
            # Test de r√©solution
            resolved_id = TicketReferenceService.resolve_reference_token(token)
            if resolved_id == test_ticket_id:
                print(f"‚úÖ R√©solution OK: {token} -> {resolved_id[:8]}...")
            else:
                print(f"‚ùå Erreur r√©solution: {resolved_id}")
        else:
            print("‚ùå √âchec cr√©ation token")
            
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("Migration: Table ticket_references")
    print("=" * 40)
    
    # Cr√©er la table
    success = create_ticket_references_table()
    
    if success:
        # Tester le syst√®me
        test_token_generation()
    
    print("\n‚úÖ Migration termin√©e")
