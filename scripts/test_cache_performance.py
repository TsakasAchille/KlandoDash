#!/usr/bin/env python3
"""
Script de test des performances du syst√®me de cache optimis√©
Mesure les temps de r√©ponse avec et sans cache pour diff√©rents sc√©narios
"""

import time
import sys
import os
import statistics
from typing import List, Dict

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuration minimale des variables d'environnement pour les tests
os.environ.setdefault('DATABASE_URL', 'sqlite:///test.db')
os.environ.setdefault('SECRET_KEY', 'test-key-for-cache-performance')
os.environ.setdefault('DASH_DEBUG', 'False')

from dash_apps.services.users_cache_service import UsersCacheService
from dash_apps.repositories.user_repository import UserRepository
from dash_apps.components.user_profile import render_user_profile
from dash_apps.components.user_stats import render_user_stats
from dash_apps.components.user_trips import render_user_trips


class CachePerformanceTester:
    """Testeur de performance pour le syst√®me de cache"""
    
    def __init__(self):
        self.test_user_ids = []
        self.results = {}
    
    def setup_test_data(self, num_users: int = 20):
        """R√©cup√®re des UIDs d'utilisateurs r√©els pour les tests"""
        print(f"üîç R√©cup√©ration de {num_users} utilisateurs pour les tests...")
        
        try:
            # R√©cup√©rer une page d'utilisateurs via le service de cache
            result = UsersCacheService.get_users_page_result(0, num_users, {}, force_reload=True)
            if result and 'users' in result:
                self.test_user_ids = [user['uid'] for user in result['users'] if 'uid' in user]
                print(f"‚úÖ {len(self.test_user_ids)} utilisateurs r√©cup√©r√©s")
                return len(self.test_user_ids) > 0
            else:
                print("‚ùå Aucune donn√©e utilisateur trouv√©e")
                return False
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration utilisateurs: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def measure_time(self, func, *args, **kwargs):
        """Mesure le temps d'ex√©cution d'une fonction"""
        start_time = time.perf_counter()
        result = func(*args, **kwargs)
        end_time = time.perf_counter()
        return result, (end_time - start_time) * 1000  # Retour en millisecondes
    
    def test_cache_miss_performance(self, iterations: int = 5):
        """Test des performances sans cache (cache miss)"""
        print(f"\nüß™ Test Cache Miss - {iterations} it√©rations")
        
        times = []
        for i in range(iterations):
            # Nettoyer le cache avant chaque test
            UsersCacheService.clear_all_html_cache()
            UsersCacheService._local_cache.clear()
            
            user_id = self.test_user_ids[i % len(self.test_user_ids)]
            
            # Mesurer le temps de g√©n√©ration compl√®te
            start_time = time.perf_counter()
            
            # R√©cup√©rer donn√©es utilisateur
            user_data = UsersCacheService.get_user_data(user_id)
            
            # G√©n√©rer les 3 panneaux
            if user_data:
                profile_panel = render_user_profile(user_data)
                stats_panel = render_user_stats(user_data)
                trips_panel = render_user_trips(user_data)
            
            end_time = time.perf_counter()
            execution_time = (end_time - start_time) * 1000
            times.append(execution_time)
            
            print(f"  It√©ration {i+1}: {execution_time:.2f}ms")
        
        avg_time = statistics.mean(times)
        self.results['cache_miss'] = {
            'times': times,
            'average': avg_time,
            'min': min(times),
            'max': max(times)
        }
        print(f"üìä Moyenne Cache Miss: {avg_time:.2f}ms")
    
    def test_cache_hit_performance(self, iterations: int = 5):
        """Test des performances avec cache (cache hit)"""
        print(f"\nüéØ Test Cache Hit - {iterations} it√©rations")
        
        # Pr√©charger le cache pour les utilisateurs de test
        print("  Pr√©chargement du cache...")
        UsersCacheService.preload_user_panels(self.test_user_ids[:5], async_mode=False)
        
        times = []
        for i in range(iterations):
            user_id = self.test_user_ids[i % min(5, len(self.test_user_ids))]
            
            # Mesurer le temps de r√©cup√©ration depuis le cache
            start_time = time.perf_counter()
            
            # R√©cup√©rer depuis le cache HTML
            profile_panel = UsersCacheService.get_cached_panel(user_id, "profile")
            stats_panel = UsersCacheService.get_cached_panel(user_id, "stats")
            trips_panel = UsersCacheService.get_cached_panel(user_id, "trips")
            
            end_time = time.perf_counter()
            execution_time = (end_time - start_time) * 1000
            times.append(execution_time)
            
            print(f"  It√©ration {i+1}: {execution_time:.2f}ms")
        
        avg_time = statistics.mean(times)
        self.results['cache_hit'] = {
            'times': times,
            'average': avg_time,
            'min': min(times),
            'max': max(times)
        }
        print(f"üìä Moyenne Cache Hit: {avg_time:.2f}ms")
    
    def test_preload_performance(self):
        """Test des performances du pr√©chargement"""
        print(f"\n‚ö° Test Pr√©chargement Asynchrone")
        
        # Nettoyer le cache
        UsersCacheService.clear_all_html_cache()
        
        test_users = self.test_user_ids[:8]
        
        # Test pr√©chargement synchrone
        start_time = time.perf_counter()
        UsersCacheService.preload_user_panels(test_users, ['profile', 'stats'], async_mode=False)
        sync_time = (time.perf_counter() - start_time) * 1000
        
        # Nettoyer le cache
        UsersCacheService.clear_all_html_cache()
        
        # Test pr√©chargement asynchrone
        start_time = time.perf_counter()
        UsersCacheService.preload_user_panels(test_users, ['profile', 'stats'], async_mode=True)
        async_time = (time.perf_counter() - start_time) * 1000
        
        # Attendre un peu pour que les threads se terminent
        time.sleep(0.5)
        
        self.results['preload'] = {
            'sync_time': sync_time,
            'async_time': async_time,
            'improvement': ((sync_time - async_time) / sync_time) * 100
        }
        
        print(f"  Pr√©chargement synchrone: {sync_time:.2f}ms")
        print(f"  Pr√©chargement asynchrone: {async_time:.2f}ms")
        print(f"  Am√©lioration: {self.results['preload']['improvement']:.1f}%")
    
    def test_cache_stats(self):
        """Test des statistiques de cache"""
        print(f"\nüìà Statistiques du Cache")
        
        stats = UsersCacheService.get_cache_stats()
        print(f"  Cache local: {stats['local_cache_size']} entr√©es")
        print(f"  Cache HTML: {stats['html_cache_size']} panneaux")
        print(f"  TTL local: {stats['local_cache_ttl']}s")
        
        self.results['cache_stats'] = stats
    
    def generate_report(self):
        """G√©n√®re un rapport de performance"""
        print(f"\n" + "="*60)
        print("üìã RAPPORT DE PERFORMANCE DU CACHE")
        print("="*60)
        
        if 'cache_miss' in self.results and 'cache_hit' in self.results:
            miss_avg = self.results['cache_miss']['average']
            hit_avg = self.results['cache_hit']['average']
            improvement = ((miss_avg - hit_avg) / miss_avg) * 100
            
            print(f"\nüöÄ AM√âLIORATION GLOBALE: {improvement:.1f}%")
            print(f"   Cache Miss:  {miss_avg:.2f}ms")
            print(f"   Cache Hit:   {hit_avg:.2f}ms")
            print(f"   Gain:        {miss_avg - hit_avg:.2f}ms")
        
        if 'preload' in self.results:
            preload = self.results['preload']
            print(f"\n‚ö° PR√âCHARGEMENT:")
            print(f"   Synchrone:   {preload['sync_time']:.2f}ms")
            print(f"   Asynchrone:  {preload['async_time']:.2f}ms")
            print(f"   Am√©lioration: {preload['improvement']:.1f}%")
        
        if 'cache_stats' in self.results:
            stats = self.results['cache_stats']
            print(f"\nüìä UTILISATION M√âMOIRE:")
            print(f"   Cache local: {stats['local_cache_size']} entr√©es")
            print(f"   Cache HTML:  {stats['html_cache_size']} panneaux")
        
        print("\n" + "="*60)


def main():
    """Fonction principale du test"""
    print("üß™ BENCHMARK DU SYST√àME DE CACHE KLANDODASH")
    print("=" * 50)
    
    tester = CachePerformanceTester()
    
    # Configuration des tests
    if not tester.setup_test_data(20):
        print("‚ùå Impossible de configurer les donn√©es de test")
        return
    
    try:
        # Ex√©cuter les tests
        tester.test_cache_miss_performance(5)
        tester.test_cache_hit_performance(5)
        tester.test_preload_performance()
        tester.test_cache_stats()
        
        # G√©n√©rer le rapport
        tester.generate_report()
        
    except Exception as e:
        print(f"‚ùå Erreur durant les tests: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
