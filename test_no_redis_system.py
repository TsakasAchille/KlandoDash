#!/usr/bin/env python3
"""
Test du syst√®me sans Redis - validation que le cache local fonctionne compl√®tement
Valide que toutes les fonctionnalit√©s marchent sans d√©pendance Redis
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_no_redis_imports():
    """Test que le syst√®me peut s'importer sans Redis"""
    print("=== Test des imports sans Redis ===")
    
    try:
        # Test import du cache local
        from dash_apps.services.local_cache import LocalCache, local_cache
        print("‚úì LocalCache import√© avec succ√®s")
        
        # Test import du service principal
        from dash_apps.services.trips_cache_service import TripsCacheService
        print("‚úì TripsCacheService import√© avec succ√®s")
        
        # V√©rifier qu'on utilise bien le cache local
        import dash_apps.services.trips_cache_service as tcs_module
        if hasattr(tcs_module, 'cache'):
            cache_type = type(tcs_module.cache).__name__
            if cache_type == 'LocalCache':
                print("‚úì Cache local utilis√© correctement")
            else:
                print(f"‚úó Type de cache incorrect: {cache_type}")
                return False
        else:
            print("‚úó Variable cache non trouv√©e")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur d'import: {e}")
        return False

def test_cache_operations_without_redis():
    """Test des op√©rations de cache sans Redis"""
    print("\n=== Test des op√©rations de cache ===")
    
    try:
        from dash_apps.services.local_cache import local_cache
        
        # Test des op√©rations de base
        test_data = {
            "trip_id": "test_123",
            "driver": "Test Driver",
            "status": "completed",
            "distance": 42.5
        }
        
        # Test set/get trip details
        success = local_cache.set_trip_details("test_123", test_data, ttl_seconds=60)
        if not success:
            print("‚úó Erreur lors du stockage des d√©tails")
            return False
        print("‚úì D√©tails de trajet stock√©s")
        
        retrieved_data = local_cache.get_trip_details("test_123")
        if retrieved_data != test_data:
            print(f"‚úó Donn√©es incorrectes: {retrieved_data}")
            return False
        print("‚úì D√©tails de trajet r√©cup√©r√©s")
        
        # Test set/get trip stats
        stats_data = {"avg_speed": 35.2, "efficiency": 0.87}
        local_cache.set_trip_stats("test_123", stats_data, ttl_seconds=60)
        retrieved_stats = local_cache.get_trip_stats("test_123")
        if retrieved_stats != stats_data:
            print(f"‚úó Stats incorrectes: {retrieved_stats}")
            return False
        print("‚úì Statistiques de trajet stock√©es et r√©cup√©r√©es")
        
        # Test set/get trip passengers
        passengers_data = [
            {"name": "John Doe", "pickup": "Location A"},
            {"name": "Jane Smith", "pickup": "Location B"}
        ]
        local_cache.set_trip_passengers("test_123", passengers_data, ttl_seconds=60)
        retrieved_passengers = local_cache.get_trip_passengers("test_123")
        if retrieved_passengers != passengers_data:
            print(f"‚úó Passagers incorrects: {retrieved_passengers}")
            return False
        print("‚úì Passagers de trajet stock√©s et r√©cup√©r√©s")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors des op√©rations de cache: {e}")
        return False

def test_trips_cache_service_methods():
    """Test des m√©thodes du TripsCacheService sans Redis"""
    print("\n=== Test du TripsCacheService ===")
    
    try:
        from dash_apps.services.trips_cache_service import TripsCacheService
        
        # Test du chargement de configuration
        config = TripsCacheService._load_panel_config()
        if not isinstance(config, dict):
            print("‚úó Configuration des panneaux non charg√©e")
            return False
        print("‚úì Configuration des panneaux charg√©e")
        
        # Test des m√©thodes g√©n√©riques de cache
        if not hasattr(TripsCacheService, '_get_cache_data_generic'):
            print("‚úó M√©thode _get_cache_data_generic manquante")
            return False
        print("‚úì M√©thode _get_cache_data_generic pr√©sente")
        
        if not hasattr(TripsCacheService, '_set_cache_data_generic'):
            print("‚úó M√©thode _set_cache_data_generic manquante")
            return False
        print("‚úì M√©thode _set_cache_data_generic pr√©sente")
        
        # Test de la m√©thode g√©n√©rique principale
        if not hasattr(TripsCacheService, '_get_cached_panel_generic'):
            print("‚úó M√©thode _get_cached_panel_generic manquante")
            return False
        print("‚úì M√©thode _get_cached_panel_generic pr√©sente")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test du TripsCacheService: {e}")
        return False

def test_configuration_consistency():
    """Test de coh√©rence des configurations"""
    print("\n=== Test de coh√©rence des configurations ===")
    
    try:
        import json
        
        # V√©rifier la configuration du cache
        with open('dash_apps/config/cache_config.json', 'r', encoding='utf-8') as f:
            cache_config = json.load(f)
        
        if cache_config.get('cache_system', {}).get('type') != 'local_memory':
            print("‚úó Type de cache incorrect dans la configuration")
            return False
        print("‚úì Configuration cache coh√©rente")
        
        # V√©rifier la configuration des panneaux
        with open('dash_apps/config/panels_config.json', 'r', encoding='utf-8') as f:
            panels_config = json.load(f)
        
        # V√©rifier que les panneaux ont des configurations de cache
        for panel_name, panel_config in panels_config.items():
            if 'methods' not in panel_config:
                print(f"‚úó Panneau {panel_name} sans m√©thodes")
                return False
            
            methods = panel_config['methods']
            if 'cache' not in methods:
                print(f"‚úó Panneau {panel_name} sans configuration cache")
                return False
        
        print("‚úì Configuration des panneaux coh√©rente")
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test de configuration: {e}")
        return False

def test_memory_usage_and_cleanup():
    """Test de l'utilisation m√©moire et du nettoyage"""
    print("\n=== Test de gestion m√©moire ===")
    
    try:
        from dash_apps.services.local_cache import local_cache
        import time
        
        # Obtenir les stats initiales
        initial_stats = local_cache.get_stats()
        initial_entries = initial_stats.get('total_entries', 0)
        
        # Ajouter plusieurs entr√©es avec TTL court
        for i in range(10):
            local_cache.set_trip_details(f"temp_trip_{i}", {"id": f"temp_{i}"}, ttl_seconds=1)
        
        # V√©rifier que les entr√©es sont ajout√©es
        after_add_stats = local_cache.get_stats()
        if after_add_stats.get('total_entries', 0) <= initial_entries:
            print("‚úó Entr√©es non ajout√©es au cache")
            return False
        print("‚úì Entr√©es ajout√©es au cache")
        
        # Attendre l'expiration
        time.sleep(2)
        
        # Forcer un nettoyage en essayant de r√©cup√©rer une entr√©e expir√©e
        expired_data = local_cache.get_trip_details("temp_trip_0")
        if expired_data is not None:
            print("‚úó Entr√©e expir√©e non nettoy√©e")
            return False
        print("‚úì Nettoyage TTL fonctionne")
        
        # V√©rifier les statistiques finales
        final_stats = local_cache.get_stats()
        print(f"‚úì Statistiques finales: {final_stats}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test de gestion m√©moire: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("Test du syst√®me sans Redis")
    print("=" * 40)
    
    tests = [
        ("Imports sans Redis", test_no_redis_imports),
        ("Op√©rations de cache", test_cache_operations_without_redis),
        ("M√©thodes TripsCacheService", test_trips_cache_service_methods),
        ("Coh√©rence des configurations", test_configuration_consistency),
        ("Gestion m√©moire", test_memory_usage_and_cleanup)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚úó Erreur critique dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 40)
    print("R√âSUM√â DES TESTS")
    print("=" * 40)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úì R√âUSSI" if result else "‚úó √âCHOU√â"
        print(f"{test_name:.<25} {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat global: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Syst√®me sans Redis op√©rationnel!")
        print("‚úÖ Le cache local remplace compl√®tement Redis")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
